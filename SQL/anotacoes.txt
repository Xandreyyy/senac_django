Linguagem SQL -> Structure Query Language
    Linguagem script, realiza tarefas através de scripts

SGBD -> Sistema Gereneciador de Banco de Dados // NÃO É O BANCO DE DADOS, seria uma "IDE"
    SQLite: mobile
    MySQL: mobile/desktop
    MariDB: mobile/desktop

PostgreSQL -> estrutura robusta, grátis
Oracle -> estrutura robusta, pago

SQL -> Banco de dados relacional. Relaciona dados, organiza esses dados de forma tabular.

BD Relacional:
atomocidade - de forma indivisivel (insert só funcionará se todos os atributos receberem dados)
consistencia - unicidade dos dados
isolamento - ações serão executadas em sequência, segurança
durabilidade - dados sempre serão presistidos, independente dos fatores externos

NoSQL -> Banco de dados não-relacional (Not Only SQL, não é necessário usar SQL para consultar dados)
BD não-relacional:
*mais rápido
*permite registros com atributos diferentes/não é necessário preencher todos os atributos
* Basically
* Avaliable
* Soft state
* Eventual consistency
  -> Nem sempre os dados estarão disponíveis
BD não relacionais podem organizar dados no formato chave-valor (chave identifica registro, valores)
BD não relacionais podem organizar dados no formato de grafos (arestas e vertices)
Tecnologias: mongoDB, organiza dados em formato JSON

DDL (data definition language) - Linguagem de definição de dados
DML (data manipulation language) - Linguagem de manipulação de dados

tipo de dados:
    CHAR -> 1 caractere (4 bytes)
    VARCHAR -> definimos os caracteres

======================================

PADRÃO DE CONSTRUÇÃO, MVC:

M -> Model: relacionado aos componentes do controller
V -> View: relacionado ao frontend
C -> Controller: relacionado ao backend
-----------------
M -> manipulação de dados
V -> interação com o usuário
C -> camada de controle

Em SQL:
  Objeto = Tabela
  Atributos = Campos

DROP deleta em colunas
DELETE delete em linhas

* Com DELETE e UPDATE, usa-se a clausula WHERE

Relacionar tabelas:
1ª etapa:
    Modelagem conceitual (definir a estrutura primordial)
    * Relações: 1:N - um para vários (ex: um cliente pode ter vários carros, o contrário não acontece)
    * Cardinalidade de relacionamentos

2ª etapa:
    Modelagem lógica (definir tipos de dados)

3ª etapa:
    Modelagem física (criar a tabela)

Comando de projeção: SELECT (seleciona apenas as colunas)
Comando de seleção: FROM (seleciona a origem dos dados)
Comando de junção ou join: (relaciona dados)
JOINS EM MYSQL:
    inner join -> projeta apenas os dados comuns entres as tabelas;
    outter join -> projeta apenas os dados diferentes entres as tabelas;
    left join -> projeta apenas os dados comuns entres as tabelas com base na tabela da esquerda;
    right join -> projeta apenas os dados comuns entres as tabelas com base na tabela da direita.